// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/syntaqx/api/internal/model"
	"github.com/syntaqx/api/internal/service"
	"sync"
)

// Ensure, that WeatherServiceMock does implement service.WeatherService.
// If this is not the case, regenerate this file with moq.
var _ service.WeatherService = &WeatherServiceMock{}

// WeatherServiceMock is a mock implementation of service.WeatherService.
//
//	func TestSomethingThatUsesWeatherService(t *testing.T) {
//
//		// make and configure a mocked service.WeatherService
//		mockedWeatherService := &WeatherServiceMock{
//			GetWeatherFunc: func(location string) (*model.Weather, error) {
//				panic("mock out the GetWeather method")
//			},
//		}
//
//		// use mockedWeatherService in code that requires service.WeatherService
//		// and then make assertions.
//
//	}
type WeatherServiceMock struct {
	// GetWeatherFunc mocks the GetWeather method.
	GetWeatherFunc func(location string) (*model.Weather, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetWeather holds details about calls to the GetWeather method.
		GetWeather []struct {
			// Location is the location argument value.
			Location string
		}
	}
	lockGetWeather sync.RWMutex
}

// GetWeather calls GetWeatherFunc.
func (mock *WeatherServiceMock) GetWeather(location string) (*model.Weather, error) {
	if mock.GetWeatherFunc == nil {
		panic("WeatherServiceMock.GetWeatherFunc: method is nil but WeatherService.GetWeather was just called")
	}
	callInfo := struct {
		Location string
	}{
		Location: location,
	}
	mock.lockGetWeather.Lock()
	mock.calls.GetWeather = append(mock.calls.GetWeather, callInfo)
	mock.lockGetWeather.Unlock()
	return mock.GetWeatherFunc(location)
}

// GetWeatherCalls gets all the calls that were made to GetWeather.
// Check the length with:
//
//	len(mockedWeatherService.GetWeatherCalls())
func (mock *WeatherServiceMock) GetWeatherCalls() []struct {
	Location string
} {
	var calls []struct {
		Location string
	}
	mock.lockGetWeather.RLock()
	calls = mock.calls.GetWeather
	mock.lockGetWeather.RUnlock()
	return calls
}
