// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/syntaqx/api/internal/repository"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that DBMock does implement repository.DB.
// If this is not the case, regenerate this file with moq.
var _ repository.DB = &DBMock{}

// DBMock is a mock implementation of repository.DB.
//
//	func TestSomethingThatUsesDB(t *testing.T) {
//
//		// make and configure a mocked repository.DB
//		mockedDB := &DBMock{
//			CreateFunc: func(value interface{}) *gorm.DB {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(value interface{}, conds ...interface{}) *gorm.DB {
//				panic("mock out the Delete method")
//			},
//			FindFunc: func(dest interface{}, conds ...interface{}) *gorm.DB {
//				panic("mock out the Find method")
//			},
//			FirstFunc: func(dest interface{}, conds ...interface{}) *gorm.DB {
//				panic("mock out the First method")
//			},
//			SaveFunc: func(value interface{}) *gorm.DB {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedDB in code that requires repository.DB
//		// and then make assertions.
//
//	}
type DBMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(value interface{}) *gorm.DB

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(value interface{}, conds ...interface{}) *gorm.DB

	// FindFunc mocks the Find method.
	FindFunc func(dest interface{}, conds ...interface{}) *gorm.DB

	// FirstFunc mocks the First method.
	FirstFunc func(dest interface{}, conds ...interface{}) *gorm.DB

	// SaveFunc mocks the Save method.
	SaveFunc func(value interface{}) *gorm.DB

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Value is the value argument value.
			Value interface{}
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Value is the value argument value.
			Value interface{}
			// Conds is the conds argument value.
			Conds []interface{}
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Dest is the dest argument value.
			Dest interface{}
			// Conds is the conds argument value.
			Conds []interface{}
		}
		// First holds details about calls to the First method.
		First []struct {
			// Dest is the dest argument value.
			Dest interface{}
			// Conds is the conds argument value.
			Conds []interface{}
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Value is the value argument value.
			Value interface{}
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockFind   sync.RWMutex
	lockFirst  sync.RWMutex
	lockSave   sync.RWMutex
}

// Create calls CreateFunc.
func (mock *DBMock) Create(value interface{}) *gorm.DB {
	if mock.CreateFunc == nil {
		panic("DBMock.CreateFunc: method is nil but DB.Create was just called")
	}
	callInfo := struct {
		Value interface{}
	}{
		Value: value,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(value)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedDB.CreateCalls())
func (mock *DBMock) CreateCalls() []struct {
	Value interface{}
} {
	var calls []struct {
		Value interface{}
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *DBMock) Delete(value interface{}, conds ...interface{}) *gorm.DB {
	if mock.DeleteFunc == nil {
		panic("DBMock.DeleteFunc: method is nil but DB.Delete was just called")
	}
	callInfo := struct {
		Value interface{}
		Conds []interface{}
	}{
		Value: value,
		Conds: conds,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(value, conds...)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedDB.DeleteCalls())
func (mock *DBMock) DeleteCalls() []struct {
	Value interface{}
	Conds []interface{}
} {
	var calls []struct {
		Value interface{}
		Conds []interface{}
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *DBMock) Find(dest interface{}, conds ...interface{}) *gorm.DB {
	if mock.FindFunc == nil {
		panic("DBMock.FindFunc: method is nil but DB.Find was just called")
	}
	callInfo := struct {
		Dest  interface{}
		Conds []interface{}
	}{
		Dest:  dest,
		Conds: conds,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(dest, conds...)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//
//	len(mockedDB.FindCalls())
func (mock *DBMock) FindCalls() []struct {
	Dest  interface{}
	Conds []interface{}
} {
	var calls []struct {
		Dest  interface{}
		Conds []interface{}
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// First calls FirstFunc.
func (mock *DBMock) First(dest interface{}, conds ...interface{}) *gorm.DB {
	if mock.FirstFunc == nil {
		panic("DBMock.FirstFunc: method is nil but DB.First was just called")
	}
	callInfo := struct {
		Dest  interface{}
		Conds []interface{}
	}{
		Dest:  dest,
		Conds: conds,
	}
	mock.lockFirst.Lock()
	mock.calls.First = append(mock.calls.First, callInfo)
	mock.lockFirst.Unlock()
	return mock.FirstFunc(dest, conds...)
}

// FirstCalls gets all the calls that were made to First.
// Check the length with:
//
//	len(mockedDB.FirstCalls())
func (mock *DBMock) FirstCalls() []struct {
	Dest  interface{}
	Conds []interface{}
} {
	var calls []struct {
		Dest  interface{}
		Conds []interface{}
	}
	mock.lockFirst.RLock()
	calls = mock.calls.First
	mock.lockFirst.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *DBMock) Save(value interface{}) *gorm.DB {
	if mock.SaveFunc == nil {
		panic("DBMock.SaveFunc: method is nil but DB.Save was just called")
	}
	callInfo := struct {
		Value interface{}
	}{
		Value: value,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(value)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedDB.SaveCalls())
func (mock *DBMock) SaveCalls() []struct {
	Value interface{}
} {
	var calls []struct {
		Value interface{}
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
