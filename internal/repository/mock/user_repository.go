// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/gofrs/uuid/v5"
	"github.com/syntaqx/api/internal/model"
	"github.com/syntaqx/api/internal/repository"
	"sync"
)

// Ensure, that UserRepositoryMock does implement repository.UserRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of repository.UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked repository.UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			CreateUserFunc: func(user *model.User) error {
//				panic("mock out the CreateUser method")
//			},
//			DeleteUserFunc: func(id uuid.UUID) error {
//				panic("mock out the DeleteUser method")
//			},
//			GetUserByIDFunc: func(id uuid.UUID) (*model.User, error) {
//				panic("mock out the GetUserByID method")
//			},
//			ListUsersFunc: func() ([]*model.User, error) {
//				panic("mock out the ListUsers method")
//			},
//			UpdateUserFunc: func(user *model.User) error {
//				panic("mock out the UpdateUser method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires repository.UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(user *model.User) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(id uuid.UUID) error

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(id uuid.UUID) (*model.User, error)

	// ListUsersFunc mocks the ListUsers method.
	ListUsersFunc func() ([]*model.User, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(user *model.User) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// User is the user argument value.
			User *model.User
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// ID is the id argument value.
			ID uuid.UUID
		}
		// ListUsers holds details about calls to the ListUsers method.
		ListUsers []struct {
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// User is the user argument value.
			User *model.User
		}
	}
	lockCreateUser  sync.RWMutex
	lockDeleteUser  sync.RWMutex
	lockGetUserByID sync.RWMutex
	lockListUsers   sync.RWMutex
	lockUpdateUser  sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UserRepositoryMock) CreateUser(user *model.User) error {
	if mock.CreateUserFunc == nil {
		panic("UserRepositoryMock.CreateUserFunc: method is nil but UserRepository.CreateUser was just called")
	}
	callInfo := struct {
		User *model.User
	}{
		User: user,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserRepository.CreateUserCalls())
func (mock *UserRepositoryMock) CreateUserCalls() []struct {
	User *model.User
} {
	var calls []struct {
		User *model.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *UserRepositoryMock) DeleteUser(id uuid.UUID) error {
	if mock.DeleteUserFunc == nil {
		panic("UserRepositoryMock.DeleteUserFunc: method is nil but UserRepository.DeleteUser was just called")
	}
	callInfo := struct {
		ID uuid.UUID
	}{
		ID: id,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(id)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedUserRepository.DeleteUserCalls())
func (mock *UserRepositoryMock) DeleteUserCalls() []struct {
	ID uuid.UUID
} {
	var calls []struct {
		ID uuid.UUID
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *UserRepositoryMock) GetUserByID(id uuid.UUID) (*model.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("UserRepositoryMock.GetUserByIDFunc: method is nil but UserRepository.GetUserByID was just called")
	}
	callInfo := struct {
		ID uuid.UUID
	}{
		ID: id,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//
//	len(mockedUserRepository.GetUserByIDCalls())
func (mock *UserRepositoryMock) GetUserByIDCalls() []struct {
	ID uuid.UUID
} {
	var calls []struct {
		ID uuid.UUID
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// ListUsers calls ListUsersFunc.
func (mock *UserRepositoryMock) ListUsers() ([]*model.User, error) {
	if mock.ListUsersFunc == nil {
		panic("UserRepositoryMock.ListUsersFunc: method is nil but UserRepository.ListUsers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListUsers.Lock()
	mock.calls.ListUsers = append(mock.calls.ListUsers, callInfo)
	mock.lockListUsers.Unlock()
	return mock.ListUsersFunc()
}

// ListUsersCalls gets all the calls that were made to ListUsers.
// Check the length with:
//
//	len(mockedUserRepository.ListUsersCalls())
func (mock *UserRepositoryMock) ListUsersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListUsers.RLock()
	calls = mock.calls.ListUsers
	mock.lockListUsers.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *UserRepositoryMock) UpdateUser(user *model.User) error {
	if mock.UpdateUserFunc == nil {
		panic("UserRepositoryMock.UpdateUserFunc: method is nil but UserRepository.UpdateUser was just called")
	}
	callInfo := struct {
		User *model.User
	}{
		User: user,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(user)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedUserRepository.UpdateUserCalls())
func (mock *UserRepositoryMock) UpdateUserCalls() []struct {
	User *model.User
} {
	var calls []struct {
		User *model.User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
